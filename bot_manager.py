#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-–±–æ—Ç–∞
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import logging
from datetime import datetime, timezone
from telethon import TelegramClient
from medical_monitor_bot import (
    API_ID, API_HASH, BOT_TOKEN, SOURCE_CHANNELS, 
    DESTINATION_CHANNEL, START_DATE, END_DATE
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BotManager:
    def __init__(self):
        self.client = TelegramClient('bot_manager', API_ID, API_HASH)
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        await self.client.start(bot_token=BOT_TOKEN)
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω")
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        await self.client.disconnect()
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    async def check_channel_access(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º...")
        
        accessible_channels = []
        inaccessible_channels = []
        
        for channel in SOURCE_CHANNELS:
            try:
                entity = await self.client.get_entity(channel)
                accessible_channels.append(channel)
                logger.info(f"‚úì –î–æ—Å—Ç—É–ø–µ–Ω: {channel}")
            except Exception as e:
                inaccessible_channels.append(channel)
                logger.warning(f"‚úó –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {channel} - {e}")
                
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(accessible_channels)}/{len(SOURCE_CHANNELS)}")
        
        if inaccessible_channels:
            logger.warning("–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
            for channel in inaccessible_channels:
                logger.warning(f"  - {channel}")
                
        return accessible_channels, inaccessible_channels
        
    async def check_destination_channel(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            entity = await self.client.get_entity(DESTINATION_CHANNEL)
            participant = await self.client.get_permissions(entity)
            
            logger.info(f"–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {DESTINATION_CHANNEL}")
            logger.info(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if participant.is_admin else '–û–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'}")
            logger.info(f"–ú–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {participant.post_messages}")
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {e}")
            return False
            
    async def get_channel_info(self, channel_url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            entity = await self.client.get_entity(channel_url)
            return {
                'id': entity.id,
                'title': getattr(entity, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'username': getattr(entity, 'username', '–ù–µ—Ç'),
                'participants_count': getattr(entity, 'participants_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'description': getattr(entity, 'about', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_url}: {e}")
            return None
            
    async def test_message_sending(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª"""
        try:
            test_message = f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞\n–í—Ä–µ–º—è: {datetime.now()}"
            await self.client.send_message(DESTINATION_CHANNEL, test_message)
            logger.info("‚úì –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
            
    async def get_monitoring_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        now = datetime.now(timezone.utc)
        
        status = {
            'current_time': now,
            'monitoring_active': START_DATE <= now <= END_DATE,
            'days_until_start': (START_DATE - now).days if now < START_DATE else 0,
            'days_until_end': (END_DATE - now).days if now < END_DATE else 0,
            'start_date': START_DATE,
            'end_date': END_DATE
        }
        
        logger.info("–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
        logger.info(f"  –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {status['current_time']}")
        logger.info(f"  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if status['monitoring_active'] else '–ù–µ—Ç'}")
        
        if now < START_DATE:
            logger.info(f"  –î–æ –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {status['days_until_start']} –¥–Ω–µ–π")
        elif now > END_DATE:
            logger.info(f"  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {abs(status['days_until_end'])} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
        else:
            logger.info(f"  –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {status['days_until_end']} –¥–Ω–µ–π")
            
        return status

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    manager = BotManager()
    
    try:
        await manager.start()
        
        print("=" * 50)
        print("–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì-–ë–û–¢ - –ú–ï–ù–ï–î–ñ–ï–†")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await manager.get_monitoring_status()
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º
        accessible, inaccessible = await manager.check_channel_access()
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        await manager.check_destination_channel()
        print()
        
        # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await manager.test_message_sending()
        print()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö
        print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö:")
        for channel in accessible[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–∞–Ω–∞–ª–∞
            info = await manager.get_channel_info(channel)
            if info:
                print(f"  {info['title']} (@{info['username']}) - {info['participants_count']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print()
        
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except KeyboardInterrupt:
        print("\n–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: {e}")
    finally:
        await manager.stop()

if __name__ == '__main__':
    asyncio.run(main())
